// Code generated by counterfeiter. DO NOT EDIT.
package wrapperfakes

import (
	"sync"

	"github.com/cloudfoundry/cloud-service-broker/pkg/providers/tf/wrapper"
	version "github.com/hashicorp/go-version"
)

type FakeExecutorFactory struct {
	DefaultExecutorStub        func() wrapper.TerraformExecutor
	defaultExecutorMutex       sync.RWMutex
	defaultExecutorArgsForCall []struct {
	}
	defaultExecutorReturns struct {
		result1 wrapper.TerraformExecutor
	}
	defaultExecutorReturnsOnCall map[int]struct {
		result1 wrapper.TerraformExecutor
	}
	VersionedExecutorStub        func(*version.Version) wrapper.TerraformExecutor
	versionedExecutorMutex       sync.RWMutex
	versionedExecutorArgsForCall []struct {
		arg1 *version.Version
	}
	versionedExecutorReturns struct {
		result1 wrapper.TerraformExecutor
	}
	versionedExecutorReturnsOnCall map[int]struct {
		result1 wrapper.TerraformExecutor
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExecutorFactory) DefaultExecutor() wrapper.TerraformExecutor {
	fake.defaultExecutorMutex.Lock()
	ret, specificReturn := fake.defaultExecutorReturnsOnCall[len(fake.defaultExecutorArgsForCall)]
	fake.defaultExecutorArgsForCall = append(fake.defaultExecutorArgsForCall, struct {
	}{})
	stub := fake.DefaultExecutorStub
	fakeReturns := fake.defaultExecutorReturns
	fake.recordInvocation("DefaultExecutor", []interface{}{})
	fake.defaultExecutorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExecutorFactory) DefaultExecutorCallCount() int {
	fake.defaultExecutorMutex.RLock()
	defer fake.defaultExecutorMutex.RUnlock()
	return len(fake.defaultExecutorArgsForCall)
}

func (fake *FakeExecutorFactory) DefaultExecutorCalls(stub func() wrapper.TerraformExecutor) {
	fake.defaultExecutorMutex.Lock()
	defer fake.defaultExecutorMutex.Unlock()
	fake.DefaultExecutorStub = stub
}

func (fake *FakeExecutorFactory) DefaultExecutorReturns(result1 wrapper.TerraformExecutor) {
	fake.defaultExecutorMutex.Lock()
	defer fake.defaultExecutorMutex.Unlock()
	fake.DefaultExecutorStub = nil
	fake.defaultExecutorReturns = struct {
		result1 wrapper.TerraformExecutor
	}{result1}
}

func (fake *FakeExecutorFactory) DefaultExecutorReturnsOnCall(i int, result1 wrapper.TerraformExecutor) {
	fake.defaultExecutorMutex.Lock()
	defer fake.defaultExecutorMutex.Unlock()
	fake.DefaultExecutorStub = nil
	if fake.defaultExecutorReturnsOnCall == nil {
		fake.defaultExecutorReturnsOnCall = make(map[int]struct {
			result1 wrapper.TerraformExecutor
		})
	}
	fake.defaultExecutorReturnsOnCall[i] = struct {
		result1 wrapper.TerraformExecutor
	}{result1}
}

func (fake *FakeExecutorFactory) VersionedExecutor(arg1 *version.Version) wrapper.TerraformExecutor {
	fake.versionedExecutorMutex.Lock()
	ret, specificReturn := fake.versionedExecutorReturnsOnCall[len(fake.versionedExecutorArgsForCall)]
	fake.versionedExecutorArgsForCall = append(fake.versionedExecutorArgsForCall, struct {
		arg1 *version.Version
	}{arg1})
	stub := fake.VersionedExecutorStub
	fakeReturns := fake.versionedExecutorReturns
	fake.recordInvocation("VersionedExecutor", []interface{}{arg1})
	fake.versionedExecutorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExecutorFactory) VersionedExecutorCallCount() int {
	fake.versionedExecutorMutex.RLock()
	defer fake.versionedExecutorMutex.RUnlock()
	return len(fake.versionedExecutorArgsForCall)
}

func (fake *FakeExecutorFactory) VersionedExecutorCalls(stub func(*version.Version) wrapper.TerraformExecutor) {
	fake.versionedExecutorMutex.Lock()
	defer fake.versionedExecutorMutex.Unlock()
	fake.VersionedExecutorStub = stub
}

func (fake *FakeExecutorFactory) VersionedExecutorArgsForCall(i int) *version.Version {
	fake.versionedExecutorMutex.RLock()
	defer fake.versionedExecutorMutex.RUnlock()
	argsForCall := fake.versionedExecutorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeExecutorFactory) VersionedExecutorReturns(result1 wrapper.TerraformExecutor) {
	fake.versionedExecutorMutex.Lock()
	defer fake.versionedExecutorMutex.Unlock()
	fake.VersionedExecutorStub = nil
	fake.versionedExecutorReturns = struct {
		result1 wrapper.TerraformExecutor
	}{result1}
}

func (fake *FakeExecutorFactory) VersionedExecutorReturnsOnCall(i int, result1 wrapper.TerraformExecutor) {
	fake.versionedExecutorMutex.Lock()
	defer fake.versionedExecutorMutex.Unlock()
	fake.VersionedExecutorStub = nil
	if fake.versionedExecutorReturnsOnCall == nil {
		fake.versionedExecutorReturnsOnCall = make(map[int]struct {
			result1 wrapper.TerraformExecutor
		})
	}
	fake.versionedExecutorReturnsOnCall[i] = struct {
		result1 wrapper.TerraformExecutor
	}{result1}
}

func (fake *FakeExecutorFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.defaultExecutorMutex.RLock()
	defer fake.defaultExecutorMutex.RUnlock()
	fake.versionedExecutorMutex.RLock()
	defer fake.versionedExecutorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExecutorFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ wrapper.ExecutorFactory = new(FakeExecutorFactory)
