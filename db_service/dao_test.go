// Copyright 2021 the Service Broker Project Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate; DO NOT EDIT.

package db_service

import (
	"context"
	"testing"
	"time"

	"github.com/onsi/gomega"

	"github.com/cloudfoundry-incubator/cloud-service-broker/db_service/models"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func newInMemoryDatastore(t *testing.T) *SqlDatastore {
	testDb, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		t.Fatalf("Error opening test database %s", err)
	}

	testDb.Migrator().CreateTable(models.TerraformDeployment{})

	return &SqlDatastore{db: testDb}
}

func createTerraformDeploymentInstance() (string, models.TerraformDeployment) {
	testPk := "42"

	instance := models.TerraformDeployment{}
	instance.ID = testPk
	instance.LastOperationMessage = "Started 2018-01-01"
	instance.LastOperationState = "in progress"
	instance.LastOperationType = "create"
	instance.Workspace = []byte{0x7b, 0x7d}

	return testPk, instance
}

func ensureTerraformDeploymentFieldsMatch(t *testing.T, expected, actual *models.TerraformDeployment) {
	g := gomega.NewGomegaWithT(t)

	g.Expect(actual.LastOperationMessage).To(gomega.Equal(expected.LastOperationMessage), "Unexpected value for field LastOperationMessage")

	g.Expect(actual.LastOperationState).To(gomega.Equal(expected.LastOperationState), "Unexpected value for field LastOperationState")

	g.Expect(actual.LastOperationType).To(gomega.Equal(expected.LastOperationType), "Unexpected value for field LastOperationType")

	g.Expect(actual.Workspace).To(gomega.Equal(expected.Workspace), "Unexpected value for field Workspace")

}

func TestSqlDatastore_TerraformDeploymentDAO(t *testing.T) {
	ds := newInMemoryDatastore(t)
	testPk, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	// on startup, there should be no objects to find or delete
	exists, err := ds.ExistsTerraformDeploymentById(testCtx, testPk)
	ensureExistance(t, false, exists, err)

	if _, err := ds.GetTerraformDeploymentById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing PK got %v", err)
	}

	// Should be able to create the item
	beforeCreation := time.Now()
	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetTerraformDeploymentById(testCtx, testPk)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureTerraformDeploymentFieldsMatch(t, &instance, ret)

	// we should be able to update the item and it will have a new updated time
	if err := ds.SaveTerraformDeployment(testCtx, ret); err != nil {
		t.Errorf("Expected no error trying to get update %#v , got: %v", ret, err)
	}

	if !ret.UpdatedAt.After(ret.CreatedAt) {
		t.Errorf("Expected update time to be after create time after update, got update: %#v create: %#v", ret.UpdatedAt, ret.CreatedAt)
	}

	// after deleting the item we should not be able to get it
	if err := ds.DeleteTerraformDeploymentById(testCtx, testPk); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	if _, err := ds.GetTerraformDeploymentById(testCtx, testPk); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected ErrRecordNotFound after delete but got %v", err)
	}
}
func TestSqlDatastore_GetTerraformDeploymentById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	if _, err := ds.GetTerraformDeploymentById(testCtx, instance.ID); err != gorm.ErrRecordNotFound {
		t.Errorf("Expected an ErrRecordNotFound trying to get non-existing record got %v", err)
	}

	beforeCreation := time.Now()
	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}
	afterCreation := time.Now()

	// after creation we should be able to get the item
	ret, err := ds.GetTerraformDeploymentById(testCtx, instance.ID)
	if err != nil {
		t.Errorf("Expected no error trying to get saved item, got: %v", err)
	}

	if ret.CreatedAt.Before(beforeCreation) || ret.CreatedAt.After(afterCreation) {
		t.Errorf("Expected creation time to be between  %v and %v got %v", beforeCreation, afterCreation, ret.CreatedAt)
	}

	if !ret.UpdatedAt.Equal(ret.CreatedAt) {
		t.Errorf("Expected initial update time to equal creation time, but got update: %v, create: %v", ret.UpdatedAt, ret.CreatedAt)
	}

	// Ensure non-gorm fields were deserialized correctly
	ensureTerraformDeploymentFieldsMatch(t, &instance, ret)
}

func TestSqlDatastore_ExistsTerraformDeploymentById(t *testing.T) {
	ds := newInMemoryDatastore(t)
	_, instance := createTerraformDeploymentInstance()
	testCtx := context.Background()

	exists, err := ds.ExistsTerraformDeploymentById(testCtx, instance.ID)
	ensureExistance(t, false, exists, err)

	if err := ds.CreateTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected to be able to create the item %#v, got error: %s", instance, err)
	}

	exists, err = ds.ExistsTerraformDeploymentById(testCtx, instance.ID)
	ensureExistance(t, true, exists, err)

	if err := ds.DeleteTerraformDeployment(testCtx, &instance); err != nil {
		t.Errorf("Expected no error when deleting by pk got: %v", err)
	}

	// we should be able to see that it was soft-deleted
	exists, err = ds.ExistsTerraformDeploymentById(testCtx, instance.ID)
	ensureExistance(t, false, exists, err)
}

func ensureExistance(t *testing.T, expected, actual bool, err error) {
	if err != nil {
		t.Fatalf("Expected err to be nil, got %v", err)
	}

	if expected != actual {
		t.Fatalf("Expected exists to be %t got %t", expected, actual)
	}
}
